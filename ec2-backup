#!/bin/sh

# Jason Ajmo and Bradford Smith
# CS 615 HW6 ec2-backup

# sanitize PATH variable
PATH=$(command -p getconf PATH)

USAGE="usage: $(basename "$0") [-h] [-l filter] [-r filter] [-v volume-id] dir"

DEPENDENCIES="aws ssh tar"

# These will be filled in later
VOLUME=""
LOCAL_FILTER="cat -"
REMOTE_FILTER="cat -"
DIR=""
AVAILABILITY_ZONE=""
EC2_AMI="ami-0b2c7fd1c1f7e91d6"

# Parameters for `aws ec2 run-instances`
EC2_PARAMETERS=""
SSH_PARAMETERS=""

# This lets us know what needs to be deleted
CREATED_VOLUME=0
CREATED_KEYPAIR=0
CREATED_SECURITY_GROUP=0

# Security group configuration
SG_NAME="ec2-backup"
SG_DESC="Temporary security group for ec2-backup"
SG_ID=""

# SSH key generation configuration
SSH_KEY_NAME="ec2-backup"
SSH_KEYFILE_NAME="ec2-backup.pem"

usage () {
    echo "$USAGE"
    exit 1
}

help_message () {
    echo "$USAGE"
    cat<<EOF
 -h             Print this help message.
 -l filter      Pass data through the given filter command on the local host
                before copying the data to the remote system.
 -r filter      Pass data through the given filter command on the remote host
                before writing the data to the volume.
 -v volume-id   Use the given volume instead of creating a new one.
EOF
    exit 0
}

check_dependencies () {
    for dep in $DEPENDENCIES; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            echoerr "$(basename "$0"): requires '$dep' command."
            exit 1
        fi
    done
}

parse_input () {
    while getopts hl:r:v: flag; do
        case $flag in
            h) help_message;;
            l) LOCAL_FILTER="$OPTARG";;
            r) REMOTE_FILTER="$OPTARG";;
            v) VOLUME="$OPTARG";;
            \?) usage;;
        esac
    done
    shift $((OPTIND - 1))

    [ -z "$1" ] && usage || DIR=$1
    [ -d "$DIR" ] || { echoerr "'$DIR' is not a directory"; exit 1; }
}

validate_volume () {
    VOLUME="$1"

    VOLUME_INFO=$(aws ec2 describe-volumes --output text --volume-ids \
        "$VOLUME" --query \
        'Volumes[*].{Size:Size,AvailabilityZone:AvailabilityZone,State:State}'\
        2>&1)
    AVAILABILITY_ZONE=$(echo "$VOLUME_INFO" | awk '{ print $1 }')
    STATE=$(echo "$VOLUME_INFO" | awk '{ print $3 }')
    VOLUME_SIZE=$(echo "$VOLUME_INFO" | awk '{ print $2 }')

    if echo "$VOLUME_SIZE" | grep -q "error"; then
        echoerr "Invalid volume ID"
        exit 1
    fi

    if [ "$VOLUME_SIZE" -lt "$SIZE" ]; then
        echoerr "Volume must be at least $SIZE GB"
        exit 1
    fi

    if [ "$STATE" != "available" ]; then
        echoerr "Volume is unavailable"
        exit 1
    fi
}

debug_print () {
    [ -z "$EC2_BACKUP_VERBOSE" ] || echo "$1"
}

create_security_group () {
    debug_print "Creating security group"
    SG_ID=$(aws ec2 create-security-group --description "$SG_DESC" --group-name "$SG_NAME" 2>&1)

    if echo "$SG_ID" | grep -q "error"; then
        echoerr "Security group $SG_NAME already exists."
        echoerr "Please delete this group, or specify a security group with '--security-groups' or '--security-group-ids'"
        cleanup error
        exit 1
    fi

    CREATED_SECURITY_GROUP=1
    aws ec2 authorize-security-group-ingress --group-id "$SG_ID" --port 22 --protocol tcp --cidr 0.0.0.0/0
}

generate_ssh_key () {
    debug_print "Generating an SSH keypair"
    OUTPUT=$(aws ec2 create-key-pair --output text --key-name "$SSH_KEY_NAME" --query "KeyMaterial" 2>&1)

    if echo "$OUTPUT" | grep -q "error"; then
        echoerr "Unable to create SSH key ec2-backup"
        echoerr "Please delete this keypair, or specify '--key-name'"
        cleanup error
        exit 1
    fi

    CREATED_KEYPAIR=1
    if ! echo "$OUTPUT" > "$SSH_KEYFILE_NAME"; then
        echoerr "Unable to write ssh key to $SSH_KEYFILE_NAME"
        exit 1
    fi
    chmod 0400 "$SSH_KEYFILE_NAME"
    SSH_PARAMETERS="$SSH_PARAMETERS -i $SSH_KEYFILE_NAME"
}

echoerr () {
    # same as 'echo' but print to STDERR
    1>&2 echo "$@"
}

process_ec2_parameters () {
    if [ ! -z "$EC2_BACKUP_FLAGS_AWS" ]; then
        if ! not_in_string "$EC2_BACKUP_FLAGS_AWS" "--placement AvailabilityZone"; then
            echoerr "--placement cannot be overridden"
            exit 1
        fi

        if ! not_in_string "$EC2_BACKUP_FLAGS_AWS" "--output"; then
            echoerr "--outout cannot be overridden"
            exit 1
        fi

        if not_in_string "$EC2_BACKUP_FLAGS_AWS" "--security-groups" && \
           not_in_string "$EC2_BACKUP_FLAGS_AWS" "--security-group-ids"; then
            create_security_group
            add_parameter "--security-group-ids $SG_ID"
        fi

        if not_in_string "$EC2_BACKUP_FLAGS_AWS" "--image-id"; then
            add_parameter "--image-id $EC2_AMI"
        fi

        if not_in_string "$EC2_BACKUP_FLAGS_AWS" "--instance-type"; then
            add_parameter "--instance-type t2.micro"
        fi

        if not_in_string "$EC2_BACKUP_FLAGS_AWS" "--key-name"; then
            generate_ssh_key
            add_parameter "--key-name $SSH_KEY_NAME"
        fi
    else
        create_security_group
        generate_ssh_key
        add_parameter "--key-name $SSH_KEY_NAME"
        add_parameter "--security-group-ids $SG_ID"
        add_parameter "--image-id $EC2_AMI"
        add_parameter "--instance-type t2.micro"
    fi
}

process_ssh_parameters () {
    if [ ! -z "$EC2_BACKUP_FLAGS_SSH" ]; then
        if [ "$CREATED_KEYPAIR" -eq 1 ] && ! not_in_string "$EC2_BACKUP_FLAGS_SSH" "-i"; then
            echoerr "-i was provided, but --key-name was not"
            echoerr "Ignoring EC2_BACKUP_FLAGS_SSH"
            EC2_BACKUP_FLAGS_SSH=""
        fi
    fi

    SSH_PARAMETERS="$SSH_PARAMETERS $EC2_BACKUP_FLAGS_SSH"
}

add_parameter () {
    EC2_PARAMETERS="$EC2_PARAMETERS $1"
}

not_in_string () {
    echo "$1" | grep -vq -- "$2"
    return "$?"
}

cleanup () {
    # NOTE: if this is cleaning up from an error $1 should be provided, it
    # doesn't matter what it's value is, this allows us to also delete a volume
    # we may have created in the case of an error

    if [ -n "$VOLUME" ]; then
        aws ec2 detach-volume --volume-id "$VOLUME" 2>/dev/null

        debug_print "Waiting for volume to detach"
        while true; do
            STATE=$(aws ec2 describe-volumes --output text --volume-ids "$VOLUME"\
                --query 'Volumes[*].{State:State}')
            [ "$STATE" = "available" ] && break
            sleep 1
        done

        if [ "$CREATED_VOLUME" -eq 1 ] && [ -n "$1" ]; then
            aws ec2 delete-volume --volume-id "$VOLUME"
        fi
    fi

    if [ -n "$INSTANCE_ID" ]; then
        aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"

        debug_print "Waiting for instance to terminate"
        while true; do
            STATE=$(aws ec2 describe-instances --output text --instance-ids \
                "$INSTANCE_ID" --query 'Reservations[*].Instances[*].{State:State}'\
                | awk '{ print $3 }')
            [ "$STATE" = "terminated" ] && break
            sleep 1
        done
    fi

    if [ "$CREATED_KEYPAIR" -eq 1 ]; then
        debug_print "Deleting generated keypair"
        rm -f "$SSH_KEYFILE_NAME" >/dev/null 2>&1
        aws ec2 delete-key-pair --key-name "$SSH_KEY_NAME"
    fi

    if [ "$CREATED_SECURITY_GROUP" -eq 1 ]; then
        debug_print "Deleting generated security group"
        aws ec2 delete-security-group --group-id "$SG_ID"
    fi
}

main () {
    parse_input "$@"
    check_dependencies

    debug_print "Determining backup size"
    SIZE=$(du -gs "$DIR" 2>/dev/null | awk '{ print $1 * 2 }')

    debug_print "Processing AWS parameters"
    process_ec2_parameters

    debug_print "Processing SSH parameters"
    process_ssh_parameters

    if [ -z "$VOLUME" ]; then
        debug_print "Creating new volume"
        AVAILABILITY_ZONE=$(aws ec2 describe-availability-zones --output text \
            | sed '1q;d' | awk '{ print $4 }')
        OUTPUT=$(aws ec2 create-volume --output text --availability-zone \
            "$AVAILABILITY_ZONE" --size "$SIZE")
        CREATED_VOLUME=1
        VOLUME=$(echo "$OUTPUT" | awk '{ print $6 }')
    else
        debug_print "Validating provided volume ID"
        validate_volume "$VOLUME"
    fi

    debug_print "Starting EC2 instance"
    add_parameter "--placement AvailabilityZone=$AVAILABILITY_ZONE"
    add_parameter "--output text"
    #shellcheck disable=SC2086
    # EC2_PARAMETERS and EC2_BACKUP_FLAGS_AWS need to expand here otherwise the
    # aws command will fail
    INSTANCE_ID=$(aws ec2 run-instances $EC2_PARAMETERS $EC2_BACKUP_FLAGS_AWS \
        | awk 'FNR == 2 { print $7 }')

    if [ -z "$INSTANCE_ID" ]; then
        echoerr "Failed to start instance"
        cleanup error
        exit 1
    fi

    debug_print "Waiting for instance to boot"
    while true; do
        STATE=$(aws ec2 describe-instances --output text --instance-ids \
            "$INSTANCE_ID" --query 'Reservations[*].Instances[*].{State:State}'\
            | awk '{ print $3 }')
        [ "$STATE" = "running" ] && break
        sleep 1
    done

    debug_print "Waiting for volume to attach to instance"
    ATTACH_OUTPUT=$(aws ec2 attach-volume --output text --volume-id "$VOLUME"\
        --instance-id "$INSTANCE_ID" --device /dev/sdf)
    DEVICE=$(echo "$ATTACH_OUTPUT" | awk '{ print $2 }')
    while true; do
        STATE=$(aws ec2 describe-volumes --output text --volume-ids "$VOLUME"\
            --query 'Volumes[*].{State:State}')
        [ "$STATE" = "in-use" ] && break
        sleep 1
    done

    INSTANCE_IP=$(aws ec2 describe-instances --output text --instance-ids \
        "$INSTANCE_ID" --query \
        'Reservations[*].Instances[*].{Address:PublicDnsName}')

    debug_print "Executing backup"
    if [ "$SSH_PARAMETERS" = "" ]; then
        #shellcheck disable=SC2029
        # We want REMOTE_FILTER and DEVICE to expand on the local side because
        # that is the only side they will be defined on
        tar cf - "$DIR" | eval "$LOCAL_FILTER" | ssh "$INSTANCE_IP" \
            "$REMOTE_FILTER | dd of=\"$DEVICE\""
    else
        #shellcheck disable=SC2086 disable=SC2029
        # SSH_PARAMETERS needs to expand for ssh to work properly, and
        # REMOTE_FILTER and DEVICE are the same as above
        tar cf - "$DIR" | eval "$LOCAL_FILTER" | ssh $SSH_PARAMETERS "$INSTANCE_IP" \
            "$REMOTE_FILTER | dd of=\"$DEVICE\""
    fi

    #shellcheck disable=SC2181
    # Ignoring this because it would be a bit cumbersome to wrap both ssh
    # commands, this should work fine as long as nothing is executed between the
    # ssh commands and this statement
    if [ "$?" -ne 0 ]; then
        echoerr "SSH command failed"
        cleanup error
        exit 1
    fi

    debug_print "Cleaning up"
    cleanup
    echo "$VOLUME"
    exit 0
}

main "$@"
