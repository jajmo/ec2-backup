#!/bin/sh

# Jason Ajmo and Bradford Smith
# CS 615 HW6 ec2-backup

# sanitize PATH variable
PATH=$(command -p getconf PATH)

USAGE="usage: $0 [-h] [-l filter] [-r filter] [-v volume-id] dir"
VOLUME=""
LOCAL_FILTER="echo"
REMOTE_FILTER="echo"
DIR=""

usage () {
    echo "$USAGE"
    exit 1
}

help_message () {
    echo "$USAGE"
    cat<<EOF
 -h             Print this help message.
 -l filter      Pass data through the given filter command on the local host
                before copying the data to the remote system.
 -r filter      Pass data through the given filter command on the remote host
                before writing the data to the volume.
 -v volume-id   Use the given volume instead of creating a new one.
EOF
    exit 0
}

parse_input () {
    while getopts hl:r:v: flag; do
        case $flag in
            h) help_message;;
            l) LOCAL_FILTER="$OPTARG";;
            r) REMOTE_FILTER="$OPTARG";;
            v) VOLUME="$OPTARG";;
            \?) usage;;
        esac
    done
    shift $((OPTIND - 1))

    [ -z "$1" ] && usage || DIR=$1
    [ -d "$DIR" ] || { echoerr "'$DIR' is not a directory"; exit 1; }
}

echoerr () {
    # same as 'echo' but print to STDERR
    1>&2 echo "$@"
}

main () {
    parse_input "$@"
    SIZE=$(du -gs "$DIR" 2> /dev/null | awk '{ print $1 * 2 }')

    if [ -z "$VOLUME" ]; then
        AVAILABILITY_ZONE=$(aws ec2 describe-availability-zones --output text | sed '1q;d' | awk '{ print $4 }')
        OUTPUT=$(aws ec2 create-volume --output text --availability-zone "$AVAILABILITY_ZONE" --size "$SIZE")
        VOLUME=$(echo "$OUTPUT" | awk '{ print $6 }')
    else
        VOLUME_INFO=$(aws ec2 describe-volumes --output text --volume-ids "$VOLUME" --query 'Volumes[*].{Size:Size,AvailabilityZone:AvailabilityZone,State:State}' 2>&1)
        VOLUME_SIZE=$(echo "$VOLUME_INFO" | awk '{ print $2 }')
        echo "$VOLUME_SIZE" | grep -q "error" && { echoerr "Invalid volume ID"; exit 1; }
        STATE=$(echo "$VOLUME_INFO" | awk '{ print $3 }')
        AVAILABILITY_ZONE=$(echo "$VOLUME_INFO" | awk '{ print $1 }')
        [ "$VOLUME_SIZE" -lt "$SIZE" ] && { echoerr "Volume must be at least $SIZE GB"; exit 1; }
        [ "$STATE" != "available" ] && { echoerr "Volume is unavailable"; exit 1; }
    fi

	# TODO: Error check $INSTANCE_ID
    INSTANCE_ID=$(aws ec2 run-instances --output text --instance-type t2.micro --image-id ami-7ad76705 --placement AvailabilityZone="$AVAILABILITY_ZONE" | awk 'FNR == 2 { print $7 }')

    while [ 1 ];
	do
		STATE=$(aws ec2 describe-instances --output text --instance-ids "$INSTANCE_ID" --query 'Reservations[*].Instances[*].{State:State}' | awk '{ print $3 }')
		[ "$STATE" = "running" ] && break
	done

	ATTACH_OUTPUT=$(aws ec2 attach-volume --output text --volume-id "$VOLUME" --instance-id "$INSTANCE_ID" --device /dev/sdf)
	DEVICE=$(echo "$ATTACH_OUTPUT" | awk '{ print $2 }')
	while [ 1 ];
	do
		STATE=$(aws ec2 describe-volumes --output text --volume-ids "$VOLUME" --query 'Volumes[*].{State:State}')
		[ "$STATE" = "in-use" ] && break
	done
}

main "$@"
