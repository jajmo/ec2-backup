#!/bin/sh

# Jason Ajmo and Bradford Smith
# CS 615 HW6 ec2-backup

USAGE="usage: $0 [-h] [-l filter] [-r filter] [-v volume-id] dir"
REGION="us-east-1a"
VOLUME=""
LOCAL_FILTER=""
REMOTE_FILTER=""
DIR=""

usage () {
    command -p echo "$USAGE"
    exit 1
}

help_message () {
    command -p echo "$USAGE"
    cat<<EOF
 -h             Print this help message.
 -l filter      Pass data through the given filter command on the local host
                before copying the data to the remote system.
 -r filter      Pass data through the given filter command on the remote host
                before writing the data to the volume.
 -v volume-id   Use the given volume instead of creating a new one.
EOF
    exit 0
}

parse_input () {
    while getopts hl:r:v: flag; do
        case $flag in
            h) help_message;;
            l) LOCAL_FILTER="$OPTARG";;
            r) REMOTE_FILTER="$OPTARG";;
            v) VOLUME="$OPTARG";;
            \?) usage;;
        esac
    done
    shift $((OPTIND - 1))

    [ -z "$1" ] && usage || DIR=$1
    [ -d "$DIR" ] || { echoerr "'$DIR' is not a directory"; exit 1; }
}

echoerr () {
    # same as 'echo' but print to STDERR
    1>&2 command -p echo "$@"
}

main () {
    parse_input "$@"
    SIZE=$(command -p du -gs "$DIR" 2> /dev/null | command -p awk '{ print $1 * 2 }')

    if [ -z "$VOLUME" ]; then
        AVAILABILITY_ZONE="$REGION"
        OUTPUT=$(command -p aws ec2 create-volume --output text --availability-zone "$REGION" --size "$SIZE")
        VOLUME=$(command -p echo "$OUTPUT" | command -p awk '{ print $6 }')
    else
        VOLUME_INFO=$(command -p aws ec2 describe-volumes --output text --volume-ids "$VOLUME" --query 'Volumes[*].{Size:Size,AvailabilityZone:AvailabilityZone,State:State}' 2>&1)
        [ "$(command -p echo "$VOLUME_SIZE" | command -p grep "error")" != "" ] && { echoerr "Invalid volume ID"; exit 1; }
        VOLUME_SIZE=$(command -p echo "$VOLUME_INFO" | command -p awk '{ print $2 }')
        STATE=$(command -p echo "$VOLUME_INFO" | command -p awk '{ print $3 }')
        AVAILABILITY_ZONE=$(command -p echo "$VOLUME_INFO" | command -p awk '{ print $1 }')
        [ "$VOLUME_SIZE" -lt "$SIZE" ] && { echoerr "Volume must be at least $SIZE GB"; exit 1; }
        [ "$STATE" != "available" ] && { echoerr "Volume is unavailable"; exit 1; }
        exit 0
    fi

    INSTANCE_ID=$(command -p aws ec2 run-instances --output text --instance-type t2.micro --image-id ami-7ad76705 --placement AvailabilityZone="$AVAILABILITY_ZONE" | command -p awk 'FNR == 2 { print $7 }')

    echo "$INSTANCE_ID"
}

main "$@"
