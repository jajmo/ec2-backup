#!/bin/sh

# Jason Ajmo and Bradford Smith
# CS 615 HW6 ec2-backup

USAGE="usage: $0 [-h] [-l filter] [-r filter] [-v volume-id] dir"
REGION="us-east-1a"
VOLUME=""
LOCAL_FILTER=""
REMOTE_FILTER=""
DIR=""

usage () {
    echo "$USAGE"
    exit 1
}

help_message () {
    echo "$USAGE"
    cat<<EOF
 -h             Print this help message.
 -l filter      Pass data through the given filter command on the local host
                before copying the data to the remote system.
 -r filter      Pass data through the given filter command on the remote host
                before writing the data to the volume.
 -v volume-id   Use the given volume instead of creating a new one.
EOF
    exit 0
}

parse_input () {
    while getopts hl:r:v: flag; do
        case $flag in
            h) help_message;;
            l) LOCAL_FILTER="$OPTARG";;
            r) REMOTE_FILTER="$OPTARG";;
            v) VOLUME="$OPTARG";;
            \?) usage;;
        esac
    done
    shift $(expr $OPTIND - 1)

    [ -z "$1" ] && usage || DIR=$1
    [ -d "$DIR" ] || { echoerr "'$DIR' is not a directory"; exit 1; }
}

echoerr () {
    # same as 'echo' but print to STDERR
    1>&2 echo "$@"
}

main () {
    parse_input "$@"
	SIZE=$(/usr/bin/du -gs "$DIR" 2> /dev/null | /usr/bin/awk '{ print $1 * 2 }')

    if [ "$VOLUME" = "" ]; then
		AVAILABILITY_ZONE="$REGION"
		OUTPUT=$(/usr/pkg/bin/aws ec2 create-volume --output text --availability-zone "$REGION" --size "$SIZE")
		VOLUME=$(/bin/echo "$OUTPUT" | /usr/bin/awk '{ print $6 }')
    else
		VOLUME_INFO=$(/usr/pkg/bin/aws ec2 describe-volumes --output text --volume-ids "$VOLUME" --query 'Volumes[*].{Size:Size,AvailabilityZone:AvailabilityZone,State:State}' 2>&1)
		[ "$(/bin/echo "$VOLUME_SIZE" | /usr/bin/grep "error")" != "" ] && { echoerr "Invalid volume ID"; exit 1; }
		VOLUME_SIZE=$(/bin/echo "$VOLUME_INFO" | /usr/bin/awk '{ print $2 }')
		STATE=$(/bin/echo "$VOLUME_INFO" | /usr/bin/awk '{ print $3 }')
		AVAILABILITY_ZONE=$(/bin/echo "$VOLUME_INFO" | /usr/bin/awk '{ print $1 }')
		[ "$VOLUME_SIZE" -lt $SIZE ] && { echoerr "Volume must be at least $SIZE GB"; exit 1; }
		[ "$STATE" != "available" ] && { echoerr "Volume is unavailable"; exit 1; }
		exit 0
	fi

	INSTANCE_ID=$(/usr/pkg/bin/aws ec2 run-instances --output text --instance-type t2.micro --image-id ami-7ad76705 --placement AvailabilityZone="$AVAILABILITY_ZONE" | /usr/bin/awk 'FNR == 2 { print $7 '})

	echo "$INSTANCE_ID"
}

main "$@"
