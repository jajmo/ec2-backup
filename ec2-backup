#!/bin/sh

# Jason Ajmo and Bradford Smith
# CS 615 HW6 ec2-backup

# sanitize PATH variable
PATH=$(command -p getconf PATH)

USAGE="usage: $(basename "$0") [-h] [-l filter] [-r filter] [-v volume-id] dir"
VOLUME=""
LOCAL_FILTER="cat -"
REMOTE_FILTER="cat -"
DIR=""
AVAILABILITY_ZONE=""
EC2_AMI="ami-7ad76705"

# Security group configuration
SG_NAME="ec2-backup"
SG_DESC="Temporary security group for ec2-backup"
SG_ID=""

usage () {
    echo "$USAGE"
    exit 1
}

help_message () {
    echo "$USAGE"
    cat<<EOF
 -h             Print this help message.
 -l filter      Pass data through the given filter command on the local host
                before copying the data to the remote system.
 -r filter      Pass data through the given filter command on the remote host
                before writing the data to the volume.
 -v volume-id   Use the given volume instead of creating a new one.
EOF
    exit 0
}

parse_input () {
    while getopts hl:r:v: flag; do
        case $flag in
            h) help_message;;
            l) LOCAL_FILTER="$OPTARG";;
            r) REMOTE_FILTER="$OPTARG";;
            v) VOLUME="$OPTARG";;
            \?) usage;;
        esac
    done
    shift $((OPTIND - 1))

    [ -z "$1" ] && usage || DIR=$1
    [ -d "$DIR" ] || { echoerr "'$DIR' is not a directory"; exit 1; }
}

validate_volume () {
    VOLUME="$1"

    VOLUME_INFO=$(aws ec2 describe-volumes --output text --volume-ids \
        "$VOLUME" --query \
        'Volumes[*].{Size:Size,AvailabilityZone:AvailabilityZone,State:State}'\
        2>&1)
    AVAILABILITY_ZONE=$(echo "$VOLUME_INFO" | awk '{ print $1 }')
    STATE=$(echo "$VOLUME_INFO" | awk '{ print $3 }')
    VOLUME_SIZE=$(echo "$VOLUME_INFO" | awk '{ print $2 }')

    if echo "$VOLUME_SIZE" | grep -q "error"; then
        echoerr "Invalid volume ID"
        exit 1
    fi

    if [ "$VOLUME_SIZE" -lt "$SIZE" ]; then
        echoerr "Volume must be at least $SIZE GB"
        exit 1
    fi

    if [ "$STATE" != "available" ]; then
        echoerr "Volume is unavailable"
        exit 1
    fi
}

debug_print () {
    [ -z "$EC2_BACKUP_VERBOSE" ] || echo "$1"
}

create_security_group () {
    debug_print "Creating security group"
    SG_ID=$(aws ec2 create-security-group --description "$SG_DESC" --group-name "$SG_NAME" 2>&1)

    if echo "$SG_ID" | grep -q "error"; then
        echoerr "Security group $SG_NAME already exists."
        echoerr "Please delete this group, or specify a security group with '--security-groups' or '--security-group-ids'"
        exit 1
    fi

    aws ec2 authorize-security-group-ingress --group-id "$SG_ID" --port 22 --protocol tcp --cidr 0.0.0.0/0
}

echoerr () {
    # same as 'echo' but print to STDERR
    1>&2 echo "$@"
}

main () {
    parse_input "$@"
    SIZE=$(du -gs "$DIR" 2> /dev/null | awk '{ print $1 * 2 }')

    if [ -z "$VOLUME" ]; then
        debug_print "Creating new volume"
        AVAILABILITY_ZONE=$(aws ec2 describe-availability-zones --output text \
            | sed '1q;d' | awk '{ print $4 }')
        OUTPUT=$(aws ec2 create-volume --output text --availability-zone \
            "$AVAILABILITY_ZONE" --size "$SIZE")
        VOLUME=$(echo "$OUTPUT" | awk '{ print $6 }')
    else
        debug_print "Validating provided volume ID"
        validate_volume "$VOLUME"
    fi

    # TODO: Don't create if user gave us the flag
    create_security_group

    debug_print "Starting EC2 instance"
    PARAMETERS="--output text --instance-type t2.micro --image-id $EC2_AMI\
        --placement AvailabilityZone=$AVAILABILITY_ZONE --security-group-ids $SG_ID"
    INSTANCE_ID=$(aws ec2 run-instances "$PARAMETERS" \
        | awk 'FNR == 2 { print $7 }')

    [ "$INSTANCE_ID" = "" ] && exit $?;

    debug_print "Waiting for instance to boot"
    while true; do
        STATE=$(aws ec2 describe-instances --output text --instance-ids \
            "$INSTANCE_ID" --query 'Reservations[*].Instances[*].{State:State}'\
            | awk '{ print $3 }')
        [ "$STATE" = "running" ] && break
        sleep 1
    done

    debug_print "Waiting for volume to attach to instance"
    ATTACH_OUTPUT=$(aws ec2 attach-volume --output text --volume-id "$VOLUME"\
        --instance-id "$INSTANCE_ID" --device /dev/sdf)
    DEVICE=$(echo "$ATTACH_OUTPUT" | awk '{ print $2 }')
    while true; do
        STATE=$(aws ec2 describe-volumes --output text --volume-ids "$VOLUME"\
            --query 'Volumes[*].{State:State}')
        [ "$STATE" = "in-use" ] && break
        sleep 1
    done

    INSTANCE_IP=$(aws ec2 describe-instances --output text --instance-ids \
        "$INSTANCE_ID" --query \
        'Reservations[*].Instances[*].{Address:PublicDnsName}')
    tar cf - "$DIR" | eval "$LOCAL_FILTER" | ssh "$INSTANCE_IP" \
        "$REMOTE_FILTER | dd of=\"$DEVICE\""

    if [ "$?" -ne 0 ]; then
        # TODO: Tear down volume (if created) and instance
        echoerr "SSH command failed";
        exit 1;
    fi

    echo "$VOLUME"
    exit 0
}

main "$@"
